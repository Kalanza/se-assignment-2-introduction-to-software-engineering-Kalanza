[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-24ddc0f5d75046c5622901739e7c5dd533143b0c8e959d652212380cedb1ea36.svg)](https://classroom.github.com/a/-ucQIGTc)
[![Open in Visual Studio Code](https://classroom.github.com/assets/open-in-vscode-718a45dd9cf7e7f842a935f5ebbe5719a5e09af4491e668f4dbf3b35d5cca122.svg)](https://classroom.github.com/online_ide?assignment_repo_id=15237003&assignment_repo_type=AssignmentRepo)
# SE-Assignment-2
Assignment: Introduction to Software Engineering
Instructions:
Answer the following questions based on your understanding of software engineering concepts. Provide detailed explanations and examples where appropriate.

Questions:
1. Define Software Engineering:

Software engineering is a discipline that involves the systematic application of engineering
principles,methods and tools to the development and maintenance of high-quality software systems

Cited from PLP Lecture Notes : Introduction to software engineering

2. What is software engineering, and how does it differ from traditional programming?
Software Development Life Cycle (SDLC):

Software engineering combines principles from programming and engineering to design, create, 
and maintain software systems.
It emphasizes systematic, disciplined, and quantifiable approaches to software development. 
In contrast, traditional programming focuses primarily on writing code for software applications,
including debugging, testing, and building on existing software.

Cited from PLP Lecture Notes : Introduction to software engineering

3. Explain the various phases of the Software Development Life Cycle. Provide a brief description of each phase.
Agile vs. Waterfall Models:

- Requirements - This is the first step and it entails gathering and documtenting user needs and 
system requirements
- Design - It involves creating high-level and detailed designs of the software architecture and user interface.
- Implementation - In this step code is written  and the software is built according to the design.
- Testing - Various tests are conducted to ensure the software meets quality standars and functional
requirements.
- Deployment - The software is released to customers and users.
- Maintenance - It entails provision of ongoing support,updates and enhancements to software 
after development

Cited from PLP Lecture Notes : Introduction to software engineering

4. Compare and contrast the Agile and Waterfall models of software development. What are the key differences, and in what scenarios might each be preferred?
Requirements Engineering:

Agile is iterative and has an incremental approach focused on flexibility,collaboration, and responding to change 
while  Waterfall methodology has a sequential approach with  distinct phases.
Agile is preffered while working on long term projects due to its flexibility while Waterfall methodology is convinient for short term projects.

Cited from PLP Lecture Notes : Introduction to software engineering

5. What is requirements engineering? Describe the process and its importance in the software development lifecycle.
Software Design Principles:

Requirements engineering is the process of eliciting, analyzing, documenting, and managing software requirements. 
Systems engineering promotes maintainable code through organization, readability, and effective practices. 
It also ensures scalability by making informed architectural decisions and handling increased workloads effectively.

Cited from geeksforgeeks.org : https://www.geeksforgeeks.org/software-engineering-requirements-engineering-process/

6. Explain the concept of modularity in software design. How does it improve maintainability and scalability of software systems?
Testing in Software Engineering:

The process of dividing a large, complex software system into smaller, addressable modules that each carry out a particular task or feature is known as modularity.
This method lowers complexity, increases scalability, and improves maintainability. 
Additionally, it encourages functional independence by enabling each function to carry out a single task with little assistance from other modules. 
Better software design and quality are ensured by cohesion and coupling, which are indicators of the strength of relationships between modules. 
In general Modularity improves software quality , scalability, and maintainability. 

Cited from institutedata.com : https://www.institutedata.com/us/blog/modularity-in-software-engineering/

7. Describe the different levels of software testing (unit testing, integration testing, system testing, acceptance testing). Why is testing crucial in software development?
Version Control Systems:

- Unit testing : This involves testing individual components or modules of software
- Integration testing : Testing interactions between different components or subsystems
- System testing : Testing the entire software system as a whole
- Acceptance testing : Testing the software against user requirements to ensure it meets user needs

Cited from PLP Lecture Notes : Introduction to software engineering

8. What are version control systems, and why are they important in software development? Give examples of popular version control systems and their features.
Software Project Management:

Version control is the practice of managing changes to source code, ensuring trackability and reversibility. 
It streamlines release management, prevents conflicts, and tracks changes to digital artifacts.
Popular systems include Git (distributed, open-source), Subversion (SVN) (centralized, supports binary files),
and Mercurial (distributed, lightweight). 

Cited from blog.logrocket.com : https://blog.logrocket.com/product-management/version-control-systems-definition-types/

9. Discuss the role of a software project manager. What are some key responsibilities and challenges faced in managing software projects?
Software Maintenance:

A software project manager is essential for successful software development, handling project proposals, defining scope, planning,
budgeting, progress tracking, risk management, team collaboration, and negotiations. 
They must balance evolving requirements, manage limited resources, coordinate diverse teams, mitigate risks, and adapt to change. 
Their responsibilities ensure efficient collaboration, successful project delivery, and maintaining software quality.

Cited from projectmanagement.com : https://project-management.com/project-manager-roles-responsibilities-software-projects/

10. Define software maintenance and explain the different types of maintenance activities. Why is maintenance an essential part of the software lifecycle?
Ethical Considerations in Software Engineering:

Software maintenance is a crucial part of the software development life cycle (SDLC), aiming to regularly enhance software to meet changing market demands.
It includes various types of maintenance activities, such as corrective maintenance, adaptive maintenance, perfective maintenance, and preventive maintenance.
The importance of software maintenance lies in ensuring software remains relevant, competitive, addresses security vulnerabilities, enhances user experience, and supports evolving business needs.
Regularly reviewing code and identifying potential problems are essential steps in maintaining software security and effectiveness.

Cited from simform.com : https://www.simform.com/blog/software-maintenance/

11. What are some ethical issues that software engineers might face? How can software engineers ensure they adhere to ethical standards in their work?

Software engineers face several ethical issues, including privacy violations, algorithmic bias, intellectual property theft, security flaws, and transparency. 
To adhere to ethical standards, they should stay informed about ethical guidelines and best practices, follow established codes of ethics, engage in critical thinking, and collaborate with colleagues and stakeholders.
Ethical software development builds trust and ensures positive societal impact, as it builds trust and ensures a positive impact on the environment. To stay informed, follow established codes of ethics, reflect on the impact of their work, and engage in ethical discussions with colleagues and stakeholders.

Cited from institutedata.com : https://www.institutedata.com/us/blog/software-engineering-code-of-ethics/

Submission Guidelines:
Your answers should be well-structured, concise, and to the point.
Provide real-world examples or case studies wherever possible.
Cite any references or sources you use in your answers.
Submit your completed assignment by [due date].
